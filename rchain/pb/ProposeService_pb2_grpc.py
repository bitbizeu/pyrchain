# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import Either_pb2 as Either__pb2
from . import ProposeService_pb2 as ProposeService__pb2


class ProposeServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.propose = channel.unary_unary(
        '/coop.rchain.casper.protocol.ProposeService/propose',
        request_serializer=ProposeService__pb2.PrintUnmatchedSendsQuery.SerializeToString,
        response_deserializer=Either__pb2.Either.FromString,
        )


class ProposeServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def propose(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ProposeServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'propose': grpc.unary_unary_rpc_method_handler(
          servicer.propose,
          request_deserializer=ProposeService__pb2.PrintUnmatchedSendsQuery.FromString,
          response_serializer=Either__pb2.Either.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'coop.rchain.casper.protocol.ProposeService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
