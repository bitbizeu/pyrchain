# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.internal.containers import (
    RepeatedScalarFieldContainer as google___protobuf___internal___containers___RepeatedScalarFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    Iterable as typing___Iterable,
    Optional as typing___Optional,
    Text as typing___Text,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class EitherAny(google___protobuf___message___Message):
    type_url = ... # type: typing___Text
    value = ... # type: bytes

    def __init__(self,
        *,
        type_url : typing___Optional[typing___Text] = None,
        value : typing___Optional[bytes] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> EitherAny: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"type_url",u"value"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"type_url",b"type_url",u"value",b"value"]) -> None: ...

class EitherError(google___protobuf___message___Message):
    messages = ... # type: google___protobuf___internal___containers___RepeatedScalarFieldContainer[typing___Text]

    def __init__(self,
        *,
        messages : typing___Optional[typing___Iterable[typing___Text]] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> EitherError: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"messages"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"messages",b"messages"]) -> None: ...

class EitherSuccess(google___protobuf___message___Message):

    @property
    def response(self) -> EitherAny: ...

    def __init__(self,
        *,
        response : typing___Optional[EitherAny] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> EitherSuccess: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"response"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"response"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"response",b"response"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"response",b"response"]) -> None: ...

class Either(google___protobuf___message___Message):

    @property
    def error(self) -> EitherError: ...

    @property
    def success(self) -> EitherSuccess: ...

    def __init__(self,
        *,
        error : typing___Optional[EitherError] = None,
        success : typing___Optional[EitherSuccess] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> Either: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"content",u"error",u"success"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"content",u"error",u"success"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"content",b"content",u"error",b"error",u"success",b"success"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"content",b"content",u"error",b"error",u"success",b"success"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"content",b"content"]) -> typing_extensions___Literal["error","success"]: ...
